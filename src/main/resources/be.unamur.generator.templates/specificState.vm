package state.${util.getStringWithFirstLowerCap($BOTName)};

import entity.$BOTName;
##foreach($master in $masters)
##set($masterName = $master.getName())
##import entity.$util.getStringWithFirstCap($masterName);
##end
#foreach($mi in $mastersImports)
import entity.$util.getStringWithFirstCap($mi);
#end

import runtime.StubHelper;
import runtime.BusinessObject;
import runtime.exception.FailedEventHandlingException;
import runtime.exception.BusinessObjectNotFoundException;
import org.bouncycastle.util.encoders.Base64;


import org.hyperledger.fabric.contract.Context;

import java.util.function.Supplier;

public class $BOTName${util.getStringWithFirstCap($stateName)}State extends $name {
  //========== Constructor ===========
  public $BOTName${util.getStringWithFirstCap($stateName)}State() {
    super("$stateName", $stateType);
  }

  //========= Event Handling =========
  //--- Creating Events ---
#foreach($method in $methods)
#if($method.getEffectType().equals("CREATE"))
  @Override
  public void $method.getName()($BOTName object, Context ctx) throws FailedEventHandlingException {
#if($masters.size() > 0)
    //Check if the referenced masters exist
#foreach($master in $masters)
#set($masterName = $master.getName())
    //$util.getStringWithFirstCap($masterName)
    if(!StubHelper.exists(ctx, object.get${util.getStringWithFirstCap($masterName)}Id()))
      throw new FailedEventHandlingException("Master with id " + object.get$util.getStringWithFirstCap($masterName)Id() + " does not exist");

    //Retrieve Master ($master.getName())
    $util.getStringWithFirstCap($masterName) $util.getStringWithFirstLowerCap($masterName) = ($util.getStringWithFirstCap($masterName))StubHelper.findBusinessObject(ctx, object.get$util.getStringWithFirstCap($masterName)Id());

#if($master.isLimitedToOne())
    //Master $master.getName() can only have one dependent of type $BOTName. Checking if one already exists
    if(StubHelper.hasLivingDependentsOfType(ctx, $util.getStringWithFirstLowerCap($masterName), object))
      throw new FailedEventHandlingException("Master with id " + object.get$util.getStringWithFirstCap($masterName)Id() + " already has a living dependent of type $BOTName (limited to one)");
#end
#end
#end

#if($mpcPresent)
    //Checking Multiple Propagation Constraints
#foreach($mpcCheck in $mpcChecks)
    $mpcCheck
#end
#end
#if($method.getIARs().size() > 0)
    //IARs Checks
#foreach($iar in $method.getIARs())
        //--- IAR: $iar ---
        try {
        //Resolving Left Hand Side
#set($currentObjectType = $BOTName)
        Object currentLHSObject = object;
#foreach($lhsComponent in $method.getLeftHandSides($iar))
#if($lhsComponent.getType().name().equals("BUSINESS_OBJECT"))
                currentLHSObject = ($lhsComponent.getNameOnly())(StubHelper.findBusinessObject(ctx, (($currentObjectType)currentLHSObject).get$lhsComponent.getNameOnly()Id()));
#set($currentObjectType = $lhsComponent.getNameOnly())
#elseif($lhsComponent.getType().name().equals("ATTRIBUTE"))
                currentLHSObject = (($currentObjectType)currentLHSObject).get$util.getStringWithFirstCap($lhsComponent.getNameOnly())();
#elseif($lhsComponent.getType().name().equals("VALUE"))
                currentLHSObject = $lhsComponent.getNameOnly();
#end
#end

        //Resolving Right Hand Side
#set($currentRHSObjectType = $BOTName)
        Object currentRHSObject = object;
#foreach($rhsComponent in $method.getRightHandSides($iar))
#if($rhsComponent.getType().name().equals("BUSINESS_OBJECT"))
                currentRHSObject = ($rhsComponent.getNameOnly())(StubHelper.findBusinessObject(ctx, (($currentRHSObjectType)currentRHSObject).get$rhsComponent.getNameOnly()Id()));
#set($currentRHSObjectType = $rhsComponent.getNameOnly())
#elseif($rhsComponent.getType().name().equals("ATTRIBUTE"))
                currentRHSObject = (($currentRHSObjectType)currentRHSObject).get$util.getStringWithFirstCap($rhsComponent.getNameOnly())();
#elseif($rhsComponent.getType().name().equals("VALUE"))
                currentRHSObject = ${rhsComponent.getNameOnly()};
#end
#end

        //Checking Condition
#set($iarAllowed = $iar.getAllowed())
#if($iarAllowed)
#set($iarBooleanOperator = "")
#set($iarOppositeBooleanOpeator = "!")
#else
#set($iarBooleanOperator = "!")
#set($iarOppositeBooleanOpeator = "")
#end
        if(${iarBooleanOperator}currentLHSObject.equals(currentRHSObject))
        System.out.println("IAR: OK");
        else {
        System.out.println("IAR: KO: " + currentLHSObject + " $iarOppositeBooleanOpeator= " + currentRHSObject);
        throw new FailedEventHandlingException("IAR NOT OK");
        }
        } catch(FailedEventHandlingException e) {
        throw e;
        }

#end
#end
    //Changes the state of the current $BOTName (object)
    $BOTName$util.getStringWithFirstCap($method.getTargetStateName())State newState = new $BOTName$util.getStringWithFirstCap($method.getTargetStateName())State();
    object.setCurrentState(newState);
    StubHelper.save(ctx, object);
#if($masters.size() > 0)
    //Trigger Event Handling for Each Master
#foreach($master in $masters)
#set($masterName = $master.getName())
    //$util.getStringWithFirstCap($masterName)
##    $util.getStringWithFirstCap($masterName) $util.getStringWithFirstLowerCap($masterName) = ($util.getStringWithFirstCap($masterName))StubHelper.findBusinessObject(ctx, object.get$util.getStringWithFirstCap($masterName)Id());
    ${util.getStringWithFirstLowerCap($masterName)}.getCurrentState().$method.getName()($util.getStringWithFirstLowerCap($masterName), ctx);
#end
#end
  }
#end
#end
  //--- Modifying Events ---
#foreach($method in $methods)
#if($method.getEffectType().equals("MODIFY"))
  @Override
  public void $method.getName()($BOTName object, Context ctx) throws FailedEventHandlingException {
#if($method.getIARs().size() > 0)
    //IARs Checks
#foreach($iar in $method.getIARs())
        //--- IAR: $iar ---
        try {
        //Resolving Left Hand Side
#set($currentObjectType = $BOTName)
        Object currentLHSObject = object;
#foreach($lhsComponent in $method.getLeftHandSides($iar))
#if($lhsComponent.getType().name().equals("BUSINESS_OBJECT"))
                currentLHSObject = ($lhsComponent.getNameOnly())(StubHelper.findBusinessObject(ctx, (($currentObjectType)currentLHSObject).get$lhsComponent.getNameOnly()Id()));
#set($currentObjectType = $lhsComponent.getNameOnly())
#elseif($lhsComponent.getType().name().equals("ATTRIBUTE"))
                currentLHSObject = (($currentObjectType)currentLHSObject).get$util.getStringWithFirstCap($lhsComponent.getNameOnly())();
#elseif($lhsComponent.getType().name().equals("VALUE"))
                currentLHSObject = $lhsComponent.getNameOnly();
#end
#end

        //Resolving Right Hand Side
#set($currentRHSObjectType = $BOTName)
        Object currentRHSObject = object;
#foreach($rhsComponent in $method.getRightHandSides($iar))
#if($rhsComponent.getType().name().equals("BUSINESS_OBJECT"))
                currentRHSObject = ($rhsComponent.getNameOnly())(StubHelper.findBusinessObject(ctx, (($currentRHSObjectType)currentRHSObject).get$rhsComponent.getNameOnly()Id()));
#set($currentRHSObjectType = $rhsComponent.getNameOnly())
#elseif($rhsComponent.getType().name().equals("ATTRIBUTE"))
                currentRHSObject = (($currentRHSObjectType)currentRHSObject).get$util.getStringWithFirstCap($rhsComponent.getNameOnly())();
#elseif($rhsComponent.getType().name().equals("VALUE"))
                currentRHSObject = ${rhsComponent.getNameOnly()};
#end
#end

        //Checking Condition
#set($iarAllowed = $iar.getAllowed())
#if($iarAllowed)
#set($iarBooleanOperator = "")
#set($iarOppositeBooleanOpeator = "!")
#else
#set($iarBooleanOperator = "!")
#set($iarOppositeBooleanOpeator = "")
#end
        if(${iarBooleanOperator}currentLHSObject.equals(currentRHSObject))
        System.out.println("IAR: OK");
        else {
        System.out.println("IAR: KO: " + currentLHSObject + " $iarOppositeBooleanOpeator= " + currentRHSObject);
        throw new FailedEventHandlingException("IAR NOT OK");
        }
        } catch(FailedEventHandlingException e) {
        throw e;
        }

#end
#end

#if($masters.size() > 0)
    //The $BOTName object will be saved with its current properties
    //Before changing state and (possibly) attributes, we check there was no change to the masters
    $BOTName currentLedgerObject = ($BOTName)StubHelper.findBusinessObject(ctx, object.getId());
#foreach($master in $masters)
#set($masterName = $master.getName())
    if(!object.get$util.getStringWithFirstCap($masterName)Id().equals(currentLedgerObject.get$util.getStringWithFirstCap($masterName)Id()))
      throw new FailedEventHandlingException("The master of a Business Object (" + object.getId() + ") cannot be changed");
#end
#end
    //Changes the state of the current $BOTName (object)
    $BOTName$util.getStringWithFirstCap($method.getTargetStateName())State newState = new $BOTName$util.getStringWithFirstCap($method.getTargetStateName())State();
    object.setCurrentState(newState);
    StubHelper.save(ctx, object);
#if($masters.size() > 0)
    //Trigger Event Handling for Each Master
#foreach($master in $masters)
#set($masterName = $master.getName())
    //$util.getStringWithFirstCap($masterName)
    $util.getStringWithFirstCap($masterName) $util.getStringWithFirstLowerCap($masterName) = ($util.getStringWithFirstCap($masterName))StubHelper.findBusinessObject(ctx, object.get$util.getStringWithFirstCap($masterName)Id());
    ${util.getStringWithFirstLowerCap($masterName)}.getCurrentState().$method.getName()($util.getStringWithFirstLowerCap($masterName), ctx);
#end
#end
  }
#end
#end

  //--- Ending Events ---
#foreach($method in $methods)
#if($method.getEffectType().equals("END"))
  @Override
  public void $method.getName()($BOTName object, Context ctx) throws FailedEventHandlingException {
#if($method.getIARs().size() > 0)
    //IARs Checks
#foreach($iar in $method.getIARs())
        //--- IAR: $iar ---
        try {
        //Resolving Left Hand Side
#set($currentObjectType = $BOTName)
        Object currentLHSObject = object;
#foreach($lhsComponent in $method.getLeftHandSides($iar))
#if($lhsComponent.getType().name().equals("BUSINESS_OBJECT"))
                currentLHSObject = ($lhsComponent.getNameOnly())(StubHelper.findBusinessObject(ctx, (($currentObjectType)currentLHSObject).get$lhsComponent.getNameOnly()Id()));
#set($currentObjectType = $lhsComponent.getNameOnly())
#elseif($lhsComponent.getType().name().equals("ATTRIBUTE"))
                currentLHSObject = (($currentObjectType)currentLHSObject).get$util.getStringWithFirstCap($lhsComponent.getNameOnly())();
#elseif($lhsComponent.getType().name().equals("VALUE"))
                currentLHSObject = $lhsComponent.getNameOnly();
#elseif($lhsComponent.getType().name().equals("SENDER"))
                byte[] encodedPK = ctx.getClientIdentity().getX509Certificate().getPublicKey().getEncoded();
                String plainPK = new String(Base64.encode(encodedPK));
                currentLHSObject = plainPK;
#end
#end

        //Resolving Right Hand Side
#set($currentRHSObjectType = $BOTName)
        Object currentRHSObject = object;
#foreach($rhsComponent in $method.getRightHandSides($iar))
#if($rhsComponent.getType().name().equals("BUSINESS_OBJECT"))
                currentRHSObject = ($rhsComponent.getNameOnly())(StubHelper.findBusinessObject(ctx, (($currentRHSObjectType)currentRHSObject).get$rhsComponent.getNameOnly()Id()));
#set($currentRHSObjectType = $rhsComponent.getNameOnly())
#elseif($rhsComponent.getType().name().equals("ATTRIBUTE"))
                currentRHSObject = (($currentRHSObjectType)currentRHSObject).get$util.getStringWithFirstCap($rhsComponent.getNameOnly())();
#elseif($rhsComponent.getType().name().equals("VALUE"))
                currentRHSObject = ${rhsComponent.getNameOnly()};
#elseif($lhsComponent.getType().name().equals("SENDER"))
                byte[] encodedPK = ctx.getClientIdentity().getX509Certificate().getPublicKey().getEncoded();
                String plainPK = new String(Base64.encode(encodedPK));
                currentLHSObject = plainPK;
#end
#end

        //Checking Condition
#set($iarAllowed = $iar.getAllowed())
#if($iarAllowed)
#set($iarBooleanOperator = "")
#set($iarOppositeBooleanOpeator = "!")
#else
#set($iarBooleanOperator = "!")
#set($iarOppositeBooleanOpeator = "")
#end
        if(${iarBooleanOperator}currentLHSObject.equals(currentRHSObject))
        System.out.println("IAR: OK");
        else {
        System.out.println("IAR: KO: " + currentLHSObject + " $iarOppositeBooleanOpeator= " + currentRHSObject);
        throw new FailedEventHandlingException("IAR NOT OK");
        }
        } catch(FailedEventHandlingException e) {
        throw e;
        }

#end
#end

    //Check if there are living  dependents before ending the object
    if(StubHelper.hasLivingDependents(ctx, object))
      throw new FailedEventHandlingException("$BOTName (" + object.getId() + ") has living dependents and therefore cannot be ended");

    //Changes the state of the current $BOTName (object)
    $BOTName$util.getStringWithFirstCap($method.getTargetStateName())State newState = new $BOTName$util.getStringWithFirstCap($method.getTargetStateName())State();
    object.setCurrentState(newState);
    StubHelper.save(ctx, object);
#if($masters.size() > 0)
    //Trigger Event Handling for Each Master
#foreach($master in $masters)
#set($masterName = $master.getName())
    //$util.getStringWithFirstCap($masterName)
    $util.getStringWithFirstCap($masterName) $util.getStringWithFirstLowerCap($masterName) = ($util.getStringWithFirstCap($masterName))StubHelper.findBusinessObject(ctx, object.get$util.getStringWithFirstCap($masterName)Id());
    ${util.getStringWithFirstLowerCap($masterName)}.getCurrentState().$method.getName()($util.getStringWithFirstLowerCap($masterName), ctx);
#end
#end
  }
#end
#end
}
